{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"radio-galaxy-classifier","text":"<p>This is a template repository for Python projects that use uv for their dependency management.</p>"},{"location":"modules/","title":"Modules","text":"<p>A collection of utility functions for data manipulation.</p> <p>This module contains a collection of utility functions for astronomical data manipulation.</p>"},{"location":"modules/#rgc.utils.data.catalog_quest","title":"<code>catalog_quest(name, service='Vizier')</code>","text":"<p>Fetch a catalog from a given astronomical service e.g. VizieR, Simbad.</p> <p>:param name: The name of the catalog to be fetched. :type name: str</p> <p>:param service: The name of the astronomical service to be used. :type service: str</p> <p>:return: A pandas DataFrame containing the fetched catalog. :rtype: pd.DataFrame</p> Source code in <code>rgc/utils/data.py</code> <pre><code>def catalog_quest(name: str, service: str = \"Vizier\") -&gt; pd.DataFrame:\n    \"\"\"\n    Fetch a catalog from a given astronomical service e.g. VizieR, Simbad.\n\n    :param name: The name of the catalog to be fetched.\n    :type name: str\n\n    :param service: The name of the astronomical service to be used.\n    :type service: str\n\n    :return: A pandas DataFrame containing the fetched catalog.\n    :rtype: pd.DataFrame\n    \"\"\"\n    if service == \"Vizier\":\n        Vizier.ROW_LIMIT = -1\n        catalog = Vizier.get_catalogs(name)\n        return cast(pd.DataFrame, catalog[0].to_pandas())\n    else:\n        raise _UnsupportedServiceError()\n</code></pre>"},{"location":"modules/#rgc.utils.data.celestial_capture","title":"<code>celestial_capture(survey, ra, dec, filename)</code>","text":"<p>Capture a celestial image using the SkyView service.</p> <p>:param survey: The name of the survey to be used e.g. 'VLA FIRST (1.4 GHz)'. :type survey: str</p> <p>:param ra: The right ascension of the celestial object. :type ra: float</p> <p>:param dec: The declination of the celestial object. :type dec: float</p> <p>:param filename: The name of the file to save the image. :type filename: str</p> Source code in <code>rgc/utils/data.py</code> <pre><code>def celestial_capture(survey: str, ra: float, dec: float, filename: str) -&gt; None:\n    \"\"\"\n    Capture a celestial image using the SkyView service.\n\n    :param survey: The name of the survey to be used e.g. 'VLA FIRST (1.4 GHz)'.\n    :type survey: str\n\n    :param ra: The right ascension of the celestial object.\n    :type ra: float\n\n    :param dec: The declination of the celestial object.\n    :type dec: float\n\n    :param filename: The name of the file to save the image.\n    :type filename: str\n    \"\"\"\n    image = SkyView.get_images(position=f\"{ra}, {dec}\", survey=survey, coordinates=\"J2000\", pixels=(150, 150))[0]\n\n    comment = str(image[0].header[\"COMMENT\"])\n    comment = comment.replace(\"\\n\", \" \")\n    comment = comment.replace(\"\\t\", \" \")\n\n    image[0].header.remove(\"comment\", comment, True)\n    image[0].header.add_comment(comment)\n\n    folder_path = Path(filename).parent\n    Path(folder_path).mkdir(parents=True, exist_ok=True)\n    image.writeto(filename, overwrite=True)\n</code></pre>"}]}